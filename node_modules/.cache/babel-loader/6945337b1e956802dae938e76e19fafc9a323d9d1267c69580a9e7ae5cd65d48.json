{"ast":null,"code":"var _Tag;\nconst NUM_ROWS = 4;\nconst NUM_COLS = 4;\nconst NUM_TILES = NUM_ROWS * NUM_COLS;\nconst EMPTY_INDEX = NUM_TILES - 1;\nconst SHUFFLE_MOVES_RANGE = [60, 80];\nconst MOVE_DIRECTIONS = ['up', 'down', 'left', 'right'];\nfunction rand(min, max) {\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\nexport default class Tag {\n  static getInstance() {\n    if (!Tag.instance) Tag.instance = new Tag();\n    return Tag.instance;\n  }\n  static getNewBoard() {\n    return Array(NUM_COLS).fill(0).map((a, i) => [Math.floor(i / NUM_ROWS), i % NUM_COLS]);\n  }\n  constructor() {\n    this.startNewGame();\n  }\n  startNewGame() {\n    this.moves = 0;\n    this.board = Tag.getNewBoard();\n    this.stack = [];\n    this.seconds = 0;\n    this.shuffle();\n    console.log(\"start new Game\");\n  }\n  canMoveTile(index) {\n    if (index < 0 || index >= NUM_TILES) return false;\n    const tilePos = this.board[index];\n    const emptyPos = this.board[EMPTY_INDEX];\n    if (tilePos[0] === emptyPos[0]) return Math.abs(tilePos[1] - emptyPos[1]) === 1;else if (tilePos[1] === emptyPos[1]) return Math.abs(tilePos[0] - emptyPos[0]) === 1;else return false;\n  }\n  moveTile(index) {\n    if (!this.shuffling && this.isSolved()) return false;\n    if (!this.canMoveTile(index)) return false;\n    const emptyPosition = [...this.board[EMPTY_INDEX]];\n    const tilePosition = [...this.board[index]];\n    let boardAfterMove = [...this.board];\n    boardAfterMove[EMPTY_INDEX] = tilePosition;\n    boardAfterMove[index] = emptyPosition;\n    if (!this.shuffling) this.stack.push(this.board);\n    this.board = boardAfterMove;\n    if (!this.shuffling) this.moves += 1;\n    return true;\n  }\n  isSolved() {\n    for (let i = 0; i < NUM_TILES; i++) {\n      if (this.board[i][0] !== Tag.solvedBoard[i][0] || this.board[i][1] !== Tag.solvedBoard[i][1]) return false;\n    }\n    return true;\n  }\n  moveInDirection(dir) {\n    const epos = this.board[EMPTY_INDEX];\n    console.log('Move direction');\n    const posToMove = dir === 'up' ? [epos[0] + 1, epos[1]] : dir === 'down' ? [epos[0] - 1, epos[1]] : dir === 'left' ? [epos[0], epos[1] + 1] : dir === 'right' ? [epos[0], epos[1] - 1] : epos;\n    let tileToMove = EMPTY_INDEX;\n    for (let i = 0; i < NUM_TILES; i++) {\n      if (this.board[i][0] === posToMove[0] && this.board[i][1] === posToMove[1]) {\n        tileToMove = i;\n        break;\n      }\n    }\n    this.moveTile(tileToMove);\n  }\n  undo() {\n    if (this.stack.length === 0) return false;\n    this.board = this.stack.pop();\n    this.moves -= 1;\n  }\n  getState() {\n    return {\n      board: this.board,\n      moves: this.moves,\n      solved: this.isSolved(),\n      seconds: this.seconds\n    };\n  }\n}\n_Tag = Tag;\nTag.instance = null;\nTag.solvedBoard = _Tag.getNewBoard();","map":{"version":3,"names":["NUM_ROWS","NUM_COLS","NUM_TILES","EMPTY_INDEX","SHUFFLE_MOVES_RANGE","MOVE_DIRECTIONS","rand","min","max","Math","floor","random","Tag","getInstance","instance","getNewBoard","Array","fill","map","a","i","constructor","startNewGame","moves","board","stack","seconds","shuffle","console","log","canMoveTile","index","tilePos","emptyPos","abs","moveTile","shuffling","isSolved","emptyPosition","tilePosition","boardAfterMove","push","solvedBoard","moveInDirection","dir","epos","posToMove","tileToMove","undo","length","pop","getState","solved","_Tag"],"sources":["D:/WebProjects/react_projects/tag-game/src/components/Tag.js"],"sourcesContent":["const NUM_ROWS = 4;\r\nconst NUM_COLS = 4;\r\nconst NUM_TILES = NUM_ROWS * NUM_COLS;\r\nconst EMPTY_INDEX = NUM_TILES - 1;\r\nconst SHUFFLE_MOVES_RANGE = [60, 80];\r\nconst MOVE_DIRECTIONS = ['up', 'down', 'left', 'right'];\r\n\r\nfunction rand (min, max) {\r\n  return min + Math.floor(Math.random() * (max - min + 1));\r\n}\r\n\r\n\r\nexport default class Tag {\r\n  static instance = null;\r\n  static solvedBoard = Tag.getNewBoard();\r\n\r\n  static getInstance () {\r\n    if (!Tag.instance) Tag.instance = new Tag();\r\n    return Tag.instance;\r\n  }\r\n\r\n  static getNewBoard(){\r\n    return Array(NUM_COLS).fill(0).map((a,i) => [\r\n      Math.floor(i/NUM_ROWS),\r\n      i % NUM_COLS\r\n    ]);\r\n  }\r\n\r\n  constructor(){\r\n    this.startNewGame();\r\n  }\r\n\r\n  startNewGame(){\r\n    this.moves = 0;\r\n    this.board = Tag.getNewBoard();\r\n    this.stack = [];\r\n    this.seconds = 0;\r\n    this.shuffle();\r\n    console.log(\"start new Game\")\r\n  }\r\n\r\n\r\n  canMoveTile (index) {\r\n    if (index < 0 || index >= NUM_TILES) return false;\r\n\r\n    const tilePos = this.board[index];\r\n    const emptyPos = this.board[EMPTY_INDEX];\r\n\r\n    if (tilePos[0] === emptyPos[0])\r\n      return Math.abs(tilePos[1] - emptyPos[1]) === 1;\r\n\r\n    else if (tilePos[1] === emptyPos[1])\r\n      return Math.abs(tilePos[0] - emptyPos[0]) === 1;\r\n\r\n    else return false;\r\n  }\r\n\r\n  moveTile (index) {\r\n    if (!this.shuffling && this.isSolved()) return false;\r\n\r\n    if (!this.canMoveTile(index)) return false;\r\n\r\n    const emptyPosition = [...this.board[EMPTY_INDEX]];\r\n    const tilePosition = [...this.board[index]];\r\n    let boardAfterMove = [...this.board];    \r\n    boardAfterMove[EMPTY_INDEX] = tilePosition;\r\n    boardAfterMove[index] = emptyPosition;\r\n\r\n    if (!this.shuffling) this.stack.push(this.board);\r\n    this.board = boardAfterMove;\r\n    if (!this.shuffling) this.moves += 1;\r\n\r\n    return true;\r\n  }\r\n\r\n  isSolved () {\r\n    for (let i=0; i<NUM_TILES; i++) {\r\n      if (this.board[i][0] !== Tag.solvedBoard[i][0] \r\n          || this.board[i][1] !== Tag.solvedBoard[i][1]) \r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  moveInDirection (dir) {\r\n    const epos = this.board[EMPTY_INDEX];\r\n\r\n    console.log('Move direction');\r\n    const posToMove =\r\n      dir === 'up' ? [epos[0]+1, epos[1]]\r\n      : dir === 'down' ? [epos[0]-1, epos[1]]\r\n      : dir === 'left' ? [epos[0], epos[1]+1]\r\n      : dir === 'right' ? [epos[0], epos[1]-1]\r\n      : epos;\r\n\r\n    let tileToMove = EMPTY_INDEX;\r\n    for (let i=0; i < NUM_TILES; i++) {\r\n      if (this.board[i][0] === posToMove[0] && this.board[i][1] === posToMove[1]) {\r\n        tileToMove = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.moveTile(tileToMove);\r\n  }\r\n\r\n  undo () {\r\n    if (this.stack.length === 0) return false;\r\n    this.board = this.stack.pop();\r\n    this.moves -= 1;\r\n  }\r\n\r\n  getState () {  \r\n    return {\r\n      board: this.board,\r\n      moves: this.moves,\r\n      solved: this.isSolved(),\r\n      seconds: this.seconds\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}